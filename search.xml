<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>EF 常见的坑</title>
      <link href="/2018/07/16/EFCommonPitfall/"/>
      <url>/2018/07/16/EFCommonPitfall/</url>
      <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li>对内存中的数据集合进行范围查询,使用Contains，不使用Any<br>使用Contains会转化为in 子查询，使用Any则会对全表进行查询</li></ul><p>使用Contains<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void GetAll(Product[] products)</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;long, Product&gt; data = products.ToDictionary(p =&gt; p.Id);</span><br><span class="line">    IEnumerable&lt;Product&gt; baseline =</span><br><span class="line">    context.Products.Where(p =&gt; data.Keys.Contains(p.Id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [p].[<span class="keyword">Id</span>], [p].[<span class="keyword">Category</span>], [p].[<span class="keyword">Name</span>], [p  [PurchasePrice], [p].[RetailPrice]</span><br><span class="line"><span class="keyword">FROM</span> [Products] <span class="keyword">AS</span> [p]</span><br><span class="line"><span class="keyword">WHERE</span> [p].[<span class="keyword">Id</span>] <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>使用Any<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void GetAll(Product[] products)</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;long, Product&gt; data = products.ToDictionary(p =&gt; p.Id);</span><br><span class="line">    IEnumerable&lt;Product&gt; baseline =</span><br><span class="line">    context.Products.Where(p =&gt; data.Keys.Any(k=&gt;k==p.Id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [p].[<span class="keyword">Id</span>], [p].[<span class="keyword">Category</span>], [p].[<span class="keyword">Name</span>], [p].[PurchasePrice], [p].[RetailPrice]</span><br><span class="line"><span class="keyword">FROM</span> [Products] <span class="keyword">AS</span> [p]</span><br></pre></td></tr></table></figure></p><ul><li>在做删除操作时只传递Id是高效、简单的方法<blockquote><p>Sending just an Id value for a delete operation is efficient and simple<br>– Pro Entity Framework Core 2 for ASP.NET Core  MVC (Page 102)</p></blockquote></li></ul>]]></content>
      
      
        <tags>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EF 常见问题</title>
      <link href="/2018/07/12/EFAccessProblems/"/>
      <url>/2018/07/12/EFAccessProblems/</url>
      <content type="html"><![CDATA[<h1 id="创建-访问数据库"><a href="#创建-访问数据库" class="headerlink" title="创建/访问数据库"></a>创建/访问数据库</h1><h2 id="“There-is-already-an-object-named-in-the-database”-Exception"><a href="#“There-is-already-an-object-named-in-the-database”-Exception" class="headerlink" title="“There is already an object named  in the database” Exception"></a>“There is already an object named <name> in the database” Exception</name></h2><p>通常发生在删除迁移文件、重建然后应用于数据的时候，这个问题通常发生在开发环境，可以执行以下命令，（删除数据库和数据），这种操作不应该用于生产环境</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef database drop --force</span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><h2 id="“A-Network-Related-or-Instance-Specific-Error-Occurred”-Exception"><a href="#“A-Network-Related-or-Instance-Specific-Error-Occurred”-Exception" class="headerlink" title="“A Network-Related or Instance-Specific Error Occurred” Exception"></a>“A Network-Related or Instance-Specific Error Occurred” Exception</h2><p>Entity Framework Core连接不上数据库服务器</p><h2 id="“Cannot-Open-Database-Requested-By-The-Login”-Exception"><a href="#“Cannot-Open-Database-Requested-By-The-Login”-Exception" class="headerlink" title="“Cannot Open Database Requested By The Login” Exception"></a>“Cannot Open Database Requested By The Login” Exception</h2><p>Entity Framework Core可以连接数据库服务器，但是要求访问的数据库不存在</p><blockquote><p><a href="https://www.connectionstrings.com/" target="_blank" rel="noopener">常用数据库连接字符串</a></p></blockquote><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><h2 id="“Property-Could-Not-Be-Mapped”-Exception"><a href="#“Property-Could-Not-Be-Mapped”-Exception" class="headerlink" title="“Property Could Not Be Mapped” Exception"></a>“Property Could Not Be Mapped” Exception</h2><p>数据模型和数据库没有同步</p><h2 id="“Invalid-Object-Name”-Exception"><a href="#“Invalid-Object-Name”-Exception" class="headerlink" title="“Invalid Object Name” Exception"></a>“Invalid Object Name” Exception</h2><p>通常是因为要查询的表不在数据库中</p><h2 id="“There-is-Already-an-Open-DataReader”-Exception"><a href="#“There-is-Already-an-Open-DataReader”-Exception" class="headerlink" title="“There is Already an Open DataReader” Exception"></a>“There is Already an Open DataReader” Exception</h2><p>这个异常出现的原因是在读取完之前查询的结果集之前触发新的查询，如果使用sqlserver，可以再连接字符串里设置MultipleActiveResultSets=true。（可以使用ToArray 或 ToList 方法强制一个查询结果完全读取。）</p><h2 id="“Cannot-Consume-Scoped-Service-from-Singleton”-Exception"><a href="#“Cannot-Consume-Scoped-Service-from-Singleton”-Exception" class="headerlink" title="“Cannot Consume Scoped Service from Singleton” Exception"></a>“Cannot Consume Scoped Service from Singleton” Exception</h2><p>在Startup.cs 里使用AddDbContext方法注册DBContext，使用AddedScoped方法为DBContext类建立依赖注入，这意味着你必须使用AddTransient 或 AddScoped method 配置DBContext类的依赖，比如说repository实现类。如果使用AddSingleton方法注册依赖服务，将会出现这个异常。</p><h2 id="The-Stale-Context-Data-Problem"><a href="#The-Stale-Context-Data-Problem" class="headerlink" title="The Stale Context Data Problem"></a>The Stale Context Data Problem</h2><blockquote><p>In an ASP.NET Core MVC application, Entity Framework Core expects a new context object to be created for<br>each HTTP request. A common problem, however, is to keep hold of context objects and try to use them for<br>subsequent requests.<br>The problem this presents is that each Entity Framework Core context object keeps track of the objects<br>it has created to use a cache and to detect changes. Keeping context objects and reusing them can produce<br>unexpected results because the data is out of date or incomplete. Even though you may have an aversion to<br>creating objects for a single request, it is already the pattern used by the rest of the application—the MVC<br>framework creates new controller and view objects for each HTTP request—and it is how Entity Framework<br>Core expects its context objects to be used.</p></blockquote><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><h2 id="部分属性未存储"><a href="#部分属性未存储" class="headerlink" title="部分属性未存储"></a>部分属性未存储</h2><p>如果一个对象只有部分属性被存储到了数据库，则需要确定你只使用了属性，并且这些属性都有get和set,Entity Framework默认会忽略方法和字段。</p><h2 id="“Instance-of-Entity-Type-Cannot-be-Tracked”-Exception"><a href="#“Instance-of-Entity-Type-Cannot-be-Tracked”-Exception" class="headerlink" title="“Instance of Entity Type Cannot be Tracked” Exception"></a>“Instance of Entity Type Cannot be Tracked” Exception</h2><p>这个异常是在查询了数据库中的相同对象之后使用EF update方法时使用了MVC模型绑定的对象时发生的。数据库上下文追踪它创建的对象来进行改变侦测，当在出现冲突的对象（由MVC模型绑定生成）时,EF无法处理,为了避免这个问题,复制MVC对象的属性到EF生成的实体对象上,然后进行更新。</p><h2 id="“Property-Has-a-Temporary-Value”-Exception"><a href="#“Property-Has-a-Temporary-Value”-Exception" class="headerlink" title="“Property Has a Temporary Value” Exception"></a>“Property Has a Temporary Value” Exception</h2><p>执行删除操作时，未设置要删除对象主键</p>]]></content>
      
      
        <tags>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ASP.NET 开发规范</title>
      <link href="/2018/07/11/AspNetCoreWeb/"/>
      <url>/2018/07/11/AspNetCoreWeb/</url>
      <content type="html"><![CDATA[<h1 id="Entity-Framework"><a href="#Entity-Framework" class="headerlink" title="Entity Framework"></a>Entity Framework</h1><ol><li><p>在ASP.NET Core MVC程序中，对于EF DbContext的访问通过依赖注入实现  </p><blockquote><p>In an ASP.NET Core MVC application, access to  data context      objects is managed using dependency  injection<br>– Pro Entity Framework Core 2 for ASP.NET Core  MVC (Page 65)  </p></blockquote></li><li><p>数据库迁移（Migration）  </p><ul><li>dotnet ef migrations add Initial (初始化数据库sql脚本)</li><li>dotnet ef database update （执行sql脚本，更新/创建 数据库）</li></ul></li><li><p>IEnumberable 与 IQueryable<br>IEnumberable 操作内存中的集合，所以EF中对IEnumberable的操作都会转化为对整个数据集合的操作（即任何操作都会触发查询表中所有数据），IQueryable 是EF对linq基于数据库数据的实现，查询命令会转换成响应的sql，然后进行查询</p><blockquote><p>LINQ is implemented as a set of extension methods that operate   on objects that implement the<br> IEnumerable<t> interface. This interface represents a sequence of objects, and it is implemented by the<br> generic collection classes and arrays.<br> Entity Framework Core includes a duplicate set of LINQ extension methods that operate on objects that<br> implement the IQueryable<t> interface. This interface represents a database query, and these duplicate<br> methods means that operations such as Count can be performed as easily on data stored in the database as<br> on in-memory objects<br>–Pro Entity Framework Core 2 for ASP.NET Core  MVC (Page 72)    </t></t></p></blockquote></li></ol><h1 id="ASP-NET-MVC"><a href="#ASP-NET-MVC" class="headerlink" title="ASP.NET MVC"></a>ASP.NET MVC</h1><ul><li><p>列表无数据展示用CSS伪类:only-child</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row placeholder"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col text-center p-2"</span>&gt;</span>No Data<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      @foreach (Product p in Model)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row p-2"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>@p.Name<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>@p.Category<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col text-right"</span>&gt;</span>@p.PurchasePrice<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col text-right"</span>&gt;</span>@p.RetailPrice<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">     <span class="selector-class">.placeholder</span> &#123;</span><br><span class="line">         <span class="attribute">visibility</span>: collapse;</span><br><span class="line">         <span class="attribute">display</span>: none</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">         <span class="selector-class">.placeholder</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">             <span class="attribute">visibility</span>: visible;</span><br><span class="line">             <span class="attribute">display</span>: flex</span><br><span class="line">         &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child" target="_blank" rel="noopener">only-child</a></p></blockquote></li></ul>]]></content>
      
      
        <tags>
            
            <tag> EF Core </tag>
            
            <tag> ASP.NET Core </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>.Net Core Mvc 安装node 包</title>
      <link href="/2018/07/10/netcore_npm/"/>
      <url>/2018/07/10/netcore_npm/</url>
      <content type="html"><![CDATA[<h3 id="新建ASP-Net-Core-Web-Application"><a href="#新建ASP-Net-Core-Web-Application" class="headerlink" title="新建ASP.Net Core Web Application"></a>新建ASP.Net Core Web Application</h3><p>选择空项目模板</p><h3 id="项目根目录下添加node-js配置文件package-json"><a href="#项目根目录下添加node-js配置文件package-json" class="headerlink" title="项目根目录下添加node.js配置文件package.json"></a>项目根目录下添加node.js配置文件package.json</h3><p>编辑package.json，如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"4.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-concat"</span>: <span class="string">"2.6.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-cssmin"</span>: <span class="string">"0.1.7"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"2.0.1"</span>,</span><br><span class="line">    <span class="attr">"rimraf"</span>: <span class="string">"2.6.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存后NuGet自动安装</p><h3 id="项目根目录下添加gulpfile-js"><a href="#项目根目录下添加gulpfile-js" class="headerlink" title="项目根目录下添加gulpfile.js"></a>项目根目录下添加gulpfile.js</h3><p>编辑gulpfile.js，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;binding BeforeBuild='clean, min' Clean='clean' /&gt;</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>),</span><br><span class="line">    rimraf = <span class="built_in">require</span>(<span class="string">"rimraf"</span>),</span><br><span class="line">    concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>),</span><br><span class="line">    cssmin = <span class="built_in">require</span>(<span class="string">"gulp-cssmin"</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> paths = &#123;</span><br><span class="line">    webroot: <span class="string">"./wwwroot/"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">paths.node_modules_libs = [</span><br><span class="line">    <span class="string">'node_modules/bootstrap/**'</span></span><br><span class="line">]</span><br><span class="line">paths.lib = paths.webroot + <span class="string">'lib/*.js'</span>;</span><br><span class="line">paths.js = paths.webroot + <span class="string">"js/**/*.js"</span>;</span><br><span class="line">paths.minJs = paths.webroot + <span class="string">"js/**/*.min.js"</span>;</span><br><span class="line">paths.css = paths.webroot + <span class="string">"css/**/*.css"</span>;</span><br><span class="line">paths.minCss = paths.webroot + <span class="string">"css/**/*.min.css"</span>;</span><br><span class="line">paths.concatJsDest = paths.webroot + <span class="string">"js/site.min.js"</span>;</span><br><span class="line">paths.concatCssDest = paths.webroot + <span class="string">"css/site.min.css"</span>;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;     <span class="comment">//复制npm包到web root中</span></span><br><span class="line">    gulp.src(<span class="string">'node_modules/bootstrap/**'</span>, &#123; <span class="attr">base</span>: <span class="string">'node_modules'</span> &#125;).pipe(gulp.dest(paths.webroot + <span class="string">'lib'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"clean:js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;   <span class="comment">//清理压缩后的js文件</span></span><br><span class="line">    rimraf(paths.concatJsDest, cb);</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">"min:js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//将需要的js压缩并合并成一个文件以减少http请求数</span></span><br><span class="line">    gulp.src([paths.js, <span class="string">"!"</span> + paths.minJs, paths.lib], &#123; <span class="attr">base</span>: <span class="string">"."</span> &#125;).pipe(concat(paths.concatJsDest))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"."</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"min:css"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([paths.css, <span class="string">"!"</span> + paths.minCss])</span><br><span class="line">        .pipe(concat(paths.concatCssDest))</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"."</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"min"</span>, [<span class="string">"min:js"</span>, <span class="string">"min:css"</span>]);</span><br></pre></td></tr></table></figure></p><p>右键点击gulpfile.js，选择Task Runner Explorer,<br>在Task Runner Explorer 窗口执行clean、copy、compress等，<br>如果Task Runner Explorer窗口出现加载task失败的情况,操作：<br>Tools&gt;Options&gt;Projects and Solutions&gt;Web Package Management&gt;External Web Tools<br><img src="https://i.loli.net/2018/07/10/5b447b572c918.png" alt="Path 配置"></p><blockquote><p><a target="_blank" href="https://docs.microsoft.com/en-us/aspnet/core/client-side/using-gulp?view=aspnetcore-2.1"><strong>glup 操作</strong></a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
